# YesLocker Comprehensive Monitoring Stack
# Docker Compose configuration for Prometheus, Grafana, Alertmanager, and supporting services

version: '3.8'

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: yeslocker-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert_rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--alertmanager.url=http://alertmanager:9093'
    networks:
      - yeslocker-monitoring
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.yeslocker.local`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Alertmanager - Alert routing and notification
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: yeslocker-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    networks:
      - yeslocker-monitoring
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.yeslocker.local`)"

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: yeslocker-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=yeslocker_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_SERVER_ROOT_URL=http://grafana.yeslocker.local
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=alerts@yeslocker.com
      - GF_SMTP_PASSWORD=smtp_password
      - GF_SMTP_FROM_ADDRESS=alerts@yeslocker.com
    networks:
      - yeslocker-monitoring
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.yeslocker.local`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: yeslocker-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - yeslocker-monitoring
    restart: unless-stopped

  # Postgres Exporter - Database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.0
    container_name: yeslocker-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:password@host.docker.internal:5432/postgres?sslmode=disable
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yaml
    volumes:
      - ./postgres-queries.yaml:/etc/postgres_exporter/queries.yaml
    networks:
      - yeslocker-monitoring
    restart: unless-stopped

  # Redis Exporter - Cache metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: yeslocker-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://host.docker.internal:6379
      - REDIS_PASSWORD=redis_password
    networks:
      - yeslocker-monitoring
    restart: unless-stopped

  # Blackbox Exporter - External monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: yeslocker-blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox.yml:/config/blackbox.yml
    command:
      - '--config.file=/config/blackbox.yml'
    networks:
      - yeslocker-monitoring
    restart: unless-stopped

  # SSL Exporter - Certificate monitoring
  ssl-exporter:
    image: ribbybibby/ssl-exporter:v2.4.0
    container_name: yeslocker-ssl-exporter
    ports:
      - "9219:9219"
    networks:
      - yeslocker-monitoring
    restart: unless-stopped

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.8.0
    container_name: yeslocker-loki
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - yeslocker-monitoring
    restart: unless-stopped

  # Promtail - Log shipping
  promtail:
    image: grafana/promtail:2.8.0
    container_name: yeslocker-promtail
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - yeslocker-monitoring
    restart: unless-stopped

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.46
    container_name: yeslocker-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - yeslocker-monitoring
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.yeslocker.local`)"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

  # Traefik - Reverse proxy and load balancer
  traefik:
    image: traefik:v3.0
    container_name: yeslocker-traefik
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml
    networks:
      - yeslocker-monitoring
    restart: unless-stopped

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: yeslocker-cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - yeslocker-monitoring
    restart: unless-stopped

  # Elasticsearch - Log storage (alternative to Loki)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: yeslocker-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - yeslocker-monitoring
    restart: unless-stopped

  # Filebeat - Log shipping to Elasticsearch
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: yeslocker-filebeat
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - yeslocker-monitoring
    restart: unless-stopped

  # Uptime Kuma - Uptime monitoring (alternative to Blackbox)
  uptime-kuma:
    image: louislam/uptime-kuma:1.23.0
    container_name: yeslocker-uptime-kuma
    ports:
      - "3001:3001"
    volumes:
      - uptime-kuma-data:/app/data
    networks:
      - yeslocker-monitoring
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptime.rule=Host(`uptime.yeslocker.local`)"

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  loki-data:
    driver: local
  elasticsearch-data:
    driver: local
  uptime-kuma-data:
    driver: local

networks:
  yeslocker-monitoring:
    driver: bridge
    name: yeslocker-monitoring