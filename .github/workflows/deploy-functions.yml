name: Deploy Edge Functions

on:
  push:
    branches:
      - main
      - staging
      - develop
    paths:
      - 'supabase/functions/**'
      - 'supabase/migrations/**'
      - '.github/workflows/deploy-functions.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      function_name:
        description: 'Function to deploy (all for all functions)'
        required: false
        default: 'all'
        type: string

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

jobs:
  detect-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment based on branch
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  validate-functions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.37.x

      - name: Validate TypeScript files
        run: |
          cd supabase/functions
          for dir in */; do
            if [ -f "$dir/index.ts" ]; then
              echo "Validating $dir"
              deno check "$dir/index.ts"
            fi
          done

      - name: Check for security issues
        run: |
          # Check for hardcoded secrets
          if grep -r "password.*=" supabase/functions/ --include="*.ts" | grep -v "password_hash\|verifyPassword"; then
            echo "❌ Found potential hardcoded passwords"
            exit 1
          fi
          
          # Check for TODO markers in production functions
          if [ "${{ needs.detect-environment.outputs.environment }}" == "production" ]; then
            if grep -r "TODO\|FIXME" supabase/functions/ --include="*.ts"; then
              echo "❌ Found TODO/FIXME markers in production code"
              exit 1
            fi
          fi
          
          echo "✅ Security checks passed"

  deploy-functions:
    needs: [detect-environment, validate-functions]
    runs-on: ubuntu-latest
    environment: ${{ needs.detect-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Set environment variables
        run: |
          ENVIRONMENT="${{ needs.detect-environment.outputs.environment }}"
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          
          case $ENVIRONMENT in
            "production")
              echo "PROJECT_REF=${{ secrets.PRODUCTION_PROJECT_REF }}" >> $GITHUB_ENV
              echo "SUPABASE_DB_PASSWORD=${{ secrets.PRODUCTION_DB_PASSWORD }}" >> $GITHUB_ENV
              ;;
            "staging")
              echo "PROJECT_REF=${{ secrets.STAGING_PROJECT_REF }}" >> $GITHUB_ENV
              echo "SUPABASE_DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}" >> $GITHUB_ENV
              ;;
            *)
              echo "PROJECT_REF=${{ secrets.DEV_PROJECT_REF }}" >> $GITHUB_ENV
              echo "SUPABASE_DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> $GITHUB_ENV
              ;;
          esac

      - name: Link Supabase project
        run: |
          supabase link --project-ref $PROJECT_REF
        working-directory: supabase

      - name: Run database migrations
        run: |
          supabase db push
        working-directory: supabase

      - name: Set function secrets
        run: |
          ENVIRONMENT="${{ needs.detect-environment.outputs.environment }}"
          
          case $ENVIRONMENT in
            "production")
              JWT_SECRET="${{ secrets.PRODUCTION_JWT_SECRET }}"
              OTP_SALT="${{ secrets.PRODUCTION_OTP_SALT }}"
              TENCENT_SECRET_ID="${{ secrets.PRODUCTION_TENCENT_SECRET_ID }}"
              TENCENT_SECRET_KEY="${{ secrets.PRODUCTION_TENCENT_SECRET_KEY }}"
              TENCENT_SMS_APP_ID="${{ secrets.PRODUCTION_TENCENT_SMS_APP_ID }}"
              TENCENT_SMS_SIGN_NAME="${{ secrets.PRODUCTION_TENCENT_SMS_SIGN_NAME }}"
              ALLOWED_ORIGINS="${{ secrets.PRODUCTION_ALLOWED_ORIGINS }}"
              ;;
            "staging")
              JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}"
              OTP_SALT="${{ secrets.STAGING_OTP_SALT }}"
              TENCENT_SECRET_ID="${{ secrets.STAGING_TENCENT_SECRET_ID }}"
              TENCENT_SECRET_KEY="${{ secrets.STAGING_TENCENT_SECRET_KEY }}"
              TENCENT_SMS_APP_ID="${{ secrets.STAGING_TENCENT_SMS_APP_ID }}"
              TENCENT_SMS_SIGN_NAME="${{ secrets.STAGING_TENCENT_SMS_SIGN_NAME }}"
              ALLOWED_ORIGINS="${{ secrets.STAGING_ALLOWED_ORIGINS }}"
              ;;
            *)
              JWT_SECRET="${{ secrets.DEV_JWT_SECRET }}"
              OTP_SALT="${{ secrets.DEV_OTP_SALT }}"
              TENCENT_SECRET_ID="${{ secrets.DEV_TENCENT_SECRET_ID }}"
              TENCENT_SECRET_KEY="${{ secrets.DEV_TENCENT_SECRET_KEY }}"
              TENCENT_SMS_APP_ID="${{ secrets.DEV_TENCENT_SMS_APP_ID }}"
              TENCENT_SMS_SIGN_NAME="${{ secrets.DEV_TENCENT_SMS_SIGN_NAME }}"
              ALLOWED_ORIGINS="${{ secrets.DEV_ALLOWED_ORIGINS }}"
              ;;
          esac
          
          supabase secrets set \
            ENVIRONMENT="$ENVIRONMENT" \
            JWT_SECRET="$JWT_SECRET" \
            OTP_SALT="$OTP_SALT" \
            TENCENT_SECRET_ID="$TENCENT_SECRET_ID" \
            TENCENT_SECRET_KEY="$TENCENT_SECRET_KEY" \
            TENCENT_SMS_APP_ID="$TENCENT_SMS_APP_ID" \
            TENCENT_SMS_SIGN_NAME="$TENCENT_SMS_SIGN_NAME" \
            ALLOWED_ORIGINS="$ALLOWED_ORIGINS" \
            --project-ref $PROJECT_REF

      - name: Deploy functions
        run: |
          FUNCTION_NAME="${{ github.event.inputs.function_name || 'all' }}"
          
          if [ "$FUNCTION_NAME" == "all" ]; then
            # Deploy all functions
            for dir in functions/*/; do
              if [ -f "$dir/index.ts" ] && [ "$(basename "$dir")" != "_shared" ]; then
                FUNC_NAME=$(basename "$dir")
                echo "🚀 Deploying function: $FUNC_NAME"
                supabase functions deploy $FUNC_NAME --project-ref $PROJECT_REF
              fi
            done
          else
            # Deploy specific function
            echo "🚀 Deploying function: $FUNCTION_NAME"
            supabase functions deploy $FUNCTION_NAME --project-ref $PROJECT_REF
          fi
        working-directory: supabase

      - name: Health check
        run: |
          echo "🔍 Running health checks..."
          ENVIRONMENT="${{ needs.detect-environment.outputs.environment }}"
          
          # Wait for functions to be ready
          sleep 30
          
          # Test basic function endpoints
          BASE_URL="https://$PROJECT_REF.supabase.co/functions/v1"
          FUNCTIONS_TO_TEST=("auth-login" "admin-login")
          
          for func in "${FUNCTIONS_TO_TEST[@]}"; do
            echo "Testing $func..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X OPTIONS "$BASE_URL/$func")
            if [ "$HTTP_STATUS" -eq 200 ] || [ "$HTTP_STATUS" -eq 204 ]; then
              echo "✅ $func is responding"
            else
              echo "❌ $func health check failed (HTTP $HTTP_STATUS)"
            fi
          done

      - name: Generate deployment report
        if: always()
        run: |
          ENVIRONMENT="${{ needs.detect-environment.outputs.environment }}"
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          cat > deployment-report.md << EOF
          # YesLocker Edge Functions Deployment Report
          
          ## Deployment Information
          - **Environment**: $ENVIRONMENT
          - **Project Ref**: $PROJECT_REF
          - **Deployed At**: $TIMESTAMP
          - **Triggered By**: ${{ github.actor }}
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          
          ## Functions Status
          EOF
          
          # List deployed functions
          if [ "${{ github.event.inputs.function_name || 'all' }}" == "all" ]; then
            for dir in supabase/functions/*/; do
              if [ -f "$dir/index.ts" ] && [ "$(basename "$dir")" != "_shared" ]; then
                FUNC_NAME=$(basename "$dir")
                echo "- ✅ $FUNC_NAME" >> deployment-report.md
              fi
            done
          else
            echo "- ✅ ${{ github.event.inputs.function_name }}" >> deployment-report.md
          fi
          
          cat >> deployment-report.md << EOF
          
          ## Environment Configuration
          - Rate limiting: Enabled
          - Security headers: Enabled
          - SMS verification: ${{ needs.detect-environment.outputs.environment != 'development' && 'Enabled' || 'Disabled' }}
          
          ## Access URLs
          - Functions Base URL: https://$PROJECT_REF.supabase.co/functions/v1/
          - Supabase Dashboard: https://supabase.com/dashboard/project/$PROJECT_REF
          
          ## Next Steps
          1. Verify all API endpoints are working correctly
          2. Run integration tests against deployed functions
          3. Update frontend environment configuration if needed
          4. Monitor function logs and performance metrics
          EOF
          
          echo "📊 Deployment report generated"
          cat deployment-report.md

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-report-${{ needs.detect-environment.outputs.environment }}
          path: deployment-report.md

  notify-success:
    needs: [detect-environment, deploy-functions]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "🎉 Edge Functions deployment successful!"
          echo "Environment: ${{ needs.detect-environment.outputs.environment }}"
          echo "Functions are now live and ready to use"

  notify-failure:
    needs: [detect-environment, deploy-functions]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Failure notification
        run: |
          echo "❌ Edge Functions deployment failed!"
          echo "Environment: ${{ needs.detect-environment.outputs.environment }}"
          echo "Please check the deployment logs for more information"